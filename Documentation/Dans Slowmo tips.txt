Never tell your password to anyone.
Wednesday, June 01, 2016
axteryo: lmao i think i might just use a game engine...........
Ninjaboi8175: Hey remmy. No I have not done any slow motion effects, and I probably don't know how to truly implement one off the top of my head. But you can break it down into 3 major portions that need to slow down and how they should be represented when slowed down: 1) Visual objects and effects 2) Audio 3) Timers and various time-related events. For the timers, it's fairly self explanatory: if you want a slow-down that's 1/2 the speed of the normal timeflow, you just have the timers count up or down at half the speed/increments. So if every loop your game detects 0.002 seconds of time passing and would normally add this to say a timer for a wave of enemies to spawn, you'd just have that 0.002 be multiplied by 0.5 as that would be the decimal equivalent to 1/2. If you wanted to slow it down to 1/4 the speed, you'd do 0.002 * 0.25, and so on. That would ensure that your slowdown of time actually affects events in the game.
Ninjaboi8175: For audio it's actually less obvious as whenever time is slowed down to say 1/2 speed, you're having to lower the pitch of the wavelengths the audio emits to about 1/2 their normal value. The playback would also be 1/2 speed, so instead of hearing "Hello!" in 1 second, you'd hear it in 2 seconds. Both of these can and should have a set cut-off point where at a certain slow-down value you just don't play the audio anymore. It wouldn't be valuable audio either at say 1/30 the speed. You could instead play custom audio at different speed variables, like if you wanted a custom sound for walking past bullets that were shot while the player was moving 200 times normal speed ( the Matrix games did this as do many other shooters that implement super slow-motion audio ).
Ninjaboi8175: Visual and objects are possibly both the easiest to understand and the hardest to get correct. If you're wanting slowdown with EVERYTHING visually happening in the game and don't mind having it all encased together, then maybe not. Chances are though you'll find situations where you want certain objects or effects to stay at normal or at a completely different speed than others. You might want everything BUT the player's character moving at 1/5 the speed so as to simulate a "time-based powerup or ability". You might want GUI effects to still respond normally even if they are elements actually inside your game's world-space and not just rendered a layer above the world-space renders.
Ninjaboi8175: So I'd think there'd be two good ways to approach this and you can decide whether any of them suit your needs: 1) Create a base class that all objects derive from in your game, and have a field that takes time dilation and constriction into account for anything to do with that object's perception of time, events, etc. This way you can tailer each object to a different timelapse while also being able to easily call the same base function(s) to control the time dilation and constriction. So you could have a vector or list of objects in your level that include everything from effects to props to your character, and when it's time to do game logic updates like movement you itterate through the list of all objects in the level with a for(int i = 0; i < objectList.Count; ++i ){} loop and have objectList[i].SetTimeDilation(value); as the thing that changes that object's time dilation value. If you want certain objects to be affected, like only enemies and props, then have your base object class have a variable for "group" or "tag" and mark all enemies as "enemy" and all props as "prop" then when you do that loop you have an if(objectList[i].Tag == "enemy" || objectList[i].Tag == "prop" ){} and have time change for them and only them.
axteryo: Dan you are too helpful
Ninjaboi8175: My second and final option would just be to have a hard-coded time calculator inside your game logic update function/loop. I'd still recommend having a list of objects in your level, but now you can just have certain effects like slowed movement happen specifically in that part of the code. It won't be as easy later on if the project is massive and has lots of time-related effects, but if you're just doing something very simple like slowing down certain things a few times in the game and it's not a critical component then it really doesn't need to be a base value in your game.
Ninjaboi8175: Thanks! If you need elaboration on any of that let me know. I've never done anything like that before so there might be a few things I'm not thinking about.
axteryo: sure thing. I think i might be more of a game designer than a game programmmer........
Ninjaboi8175: Also don't worry about using another engine for the task. As long as you keep a good list of objects in your scene/level and you make sure to keep track of what you want to do time-effect-wise, you'll be fine.
Ninjaboi8175: Lol that's fair, I'm not very good at designing things as it's more of an art than a science, but different people different strengths. Still a bit of knowledge in programming like what you've been up to is far more than many designers would do, and it only makes you better at your job.
Ninjaboi8175: Given you still need the game programmed :P
Ninjaboi8175: I think you're doing good though so don't get discouraged.
Ninjaboi8175: It probably sounds more complex than it is because I didn't explain it well enough. There might be more material online for this kind of thing.
Ninjaboi8175: Maybe check sites like http://Gamedev.net or post your question there with some personal context ( like what effects you desire out of adjusting time values and what tools you're using ) and you'll likely find plenty of people who can help.
Ninjaboi8175: If I may ask, what effect are you wanting out of changing relative time for stuff in your game?
axteryo: im glad you asked
axteryo: well you know i have a main mechanic of drawing a box arround the enemies to defeat them
axteryo: i figured that would be hella difficult in real time
axteryo: so i implemented a fake slowmo in the prototype by dropping th frame rate
axteryo: by 50%
axteryo: and  i gave the player a 90 degree turn radius
axteryo: for symmetrical purposes
axteryo: the slow motion is for being able to box in your enemies easily
axteryo: but its not the only attack, just the most necessary
axteryo: i know it would probably be simpler to have a regular top down shooter with no complicated boxing crap
axteryo: but eh i played tron once and stole the idea
Ninjaboi8175: Well you don't have to adjust the framerate at all, given how you're changing in-game time dilation and not the rate at which the screen would be updated. Also just a note SFML does actually account for lower than optimal framerate. If you specify the rate to be 60 but the actual framerate is 40, it will simply try to get to 60 but still let other logic run as normal. Unless your code is framerate dependent ( you should decouble this immediately if so ) you should be good.
it
Ninjaboi8175: Say you have a a level with five objects in it: the player, 3 enemies, an asteroid, and a missile that was just fired by an enemy ship. Your game should have an object list or vector that includes all instances of objects in your level. So those five objects would be referenced inside this list which we will call objectList.
Ninjaboi8175: During your game logic update portion of code where you would check input and have data change before rendering, you would have a portion inside update which would check to see if slow-motion is active. If the slow motion is active ( like "if(slowmotion){}" ), it will itterate through the list of objects and adjust each object's time dilation to 0.5 times it's current value.
Ninjaboi8175: So this could be respresented like this: http://pastebin.com/91nVDkMD
Ninjaboi8175: Where you would take anything you'd normally do that would be related to time or spacial movement/interaction and have it be affected by your 1/2 time dilation.
