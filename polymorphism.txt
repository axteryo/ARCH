Never tell your password to anyone.
Thursday, July 07, 2016
Ninjaboi8175: https://www.codingunit.com/cplusplus-tutorial-polymorphism-and-abstract-base-class - That should help straighten things out. You'll be needing to use pointers most likely for this
axteryo: alright ill check that out
axteryo: i just need to get something to eat fisrt
axteryo: thanks dan ill let you know how it goes
Ninjaboi8175: Mkay. I'm going to make a quick example and post the link here and see if we can't figure this out easier
Ninjaboi8175: http://pastebin.com/RHy1xNr3
Ninjaboi8175: There you go. That's an example of polymorphism with abstract base classes.
Ninjaboi8175: Basically what you're wanting is the ability to 1) force any derived classes to define the base class functions 2) Ensure nobody can just make an instance of your abstract base class and 3) Be able to use your abstract base class as a "contract" that says all derived classes are guaranteed to have certain functionality you need.
Ninjaboi8175: In my example I used animals since that was the most obvious one for me
Ninjaboi8175: What you're going to need to do is figure out what you are actually wanting to acomplish in your code.
Ninjaboi8175: See if I tried making an instance of an Animal in my example program, it wouldn't make sense. What would an Animal even look like? It's a category with certain properties, but it's not a single entity.
Ninjaboi8175: In your code your error is saying that you're trying to instantiate an abstract base class in the exact same way as if I tried to instantiate the Animal class. If it's meant to be an abstract concept like how Animal is a concept that certain entitites fall under, then you have to NOT instantiate it and instead create a deriving class that does what you need and can instantiate that.
Ninjaboi8175: If it's NOT an abstract concept like Animal, then you need to remove the "virtual" and "= 0" in its class. This would mean it's not a concept but a specific entity type. This would also mean anyone ( incluidng yourself ) can instantiate it or even derive classes from it that don't define certain functionality that the base class does.
Ninjaboi8175: But that would be the intended results for each. You don't want an abstract concept to be instantiated since it wouldn't make logical sense, so you don't. You do want a specific entity type to be instantiated because then you can have multiple instances of that class type for your use.
Ninjaboi8175: One last example outside of the Animal concept would be a Building. FarmHouse, Silo, House, those are all Buildings. Building is an abstract base concept because you can have properties that Building represents but you can't reasonably make a specific entity out of it without deriving from it in your use-case.
Ninjaboi8175: Though this last bit will probably murk the waters quite a bit for you, the difference between an abstract class and a specific entity is the question "How specific are my derivative classes?". Since you could argue that Building could be a derived class of Structure, you have to ask that previous question to know how useful having Building not be a base class be rather than Structure being the base and just having Building derive from it and any buildings derive from Building.
Ninjaboi8175: Abstraction is relative, same for categorization in several cases. If it's hard to discern how "base" you can get with a concept until you hit proverbial bedrock, just know that abstraction is only good if it solves the problems of "reasonable re-use of code" and "better inner-connecting code". Meaning if adding more abstraction doesn't fix organizational problems in your project that would prevent easy re-use of your code or extension of said code, or doesn't let your code communicate between its different parts better, then it's not worth further abstracting.
